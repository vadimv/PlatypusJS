/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ForeigKeySettingsView.java
 *
 * Created on 15.10.2009, 13:14:06
 */

package com.eas.client.dbstructure.gui.view;

import com.eas.client.dbstructure.DbStructureUtils;
import com.eas.client.metadata.ForeignKeySpec;
import java.awt.Component;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import org.openide.util.NbBundle;

/**
 *
 * @author mg
 */
public class ForeignKeySettingsView extends javax.swing.JPanel {

    /** Creates new form ForeigKeySettingsView */
    public ForeignKeySettingsView() {
        initComponents();
        ForeignKeySpec.ForeignKeyRule[] modelData = new ForeignKeySpec.ForeignKeyRule[] {ForeignKeySpec.ForeignKeyRule.CASCADE, ForeignKeySpec.ForeignKeyRule.SETNULL, ForeignKeySpec.ForeignKeyRule.SETDEFAULT, ForeignKeySpec.ForeignKeyRule.NOACTION};
        ComboBoxModel<ForeignKeySpec.ForeignKeyRule> cbUModel = new DefaultComboBoxModel<>(modelData);
        ComboBoxModel<ForeignKeySpec.ForeignKeyRule> cbDModel = new DefaultComboBoxModel<>(modelData);
        ListCellRenderer<Object> ruleRenderer = new DefaultListCellRenderer(){
            @Override
            public Component getListCellRendererComponent(JList<? extends Object> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                if(value != null)
                {
                    ForeignKeySpec.ForeignKeyRule option = (ForeignKeySpec.ForeignKeyRule)value;
                    switch(option)
                    {
                        case CASCADE:
                            value = NbBundle.getMessage(DbStructureUtils.class, "importedKeyCascade");
                            break;
                        case SETNULL:
                            value = NbBundle.getMessage(DbStructureUtils.class, "importedKeySetNull");
                            break;
                        case SETDEFAULT:
                            value = NbBundle.getMessage(DbStructureUtils.class, "importedKeySetDefault");
                            break;
                        case NOACTION:
                            value = NbBundle.getMessage(DbStructureUtils.class, "importedKeyNoAction");
                            break;
                    }
                }
                return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            }
        };
        comboUpdateRule.setRenderer(ruleRenderer);
        comboUpdateRule.setModel(cbUModel);
        comboDeleteRule.setRenderer(ruleRenderer);
        comboDeleteRule.setModel(cbDModel);
    }

    public void setConstraintName(String aName)
    {
        txtName.setText(aName);
    }

    public void setUpdateRule(ForeignKeySpec.ForeignKeyRule aRule)
    {
        comboUpdateRule.setSelectedItem(aRule);
    }

    public void setDeleteRule(ForeignKeySpec.ForeignKeyRule aRule)
    {
        comboDeleteRule.setSelectedItem(aRule);
    }

    public void setDeferred(boolean isDeferred)
    {
        chkDeferred.setSelected(isDeferred);
    }

    public String getConstraintName()
    {
        return txtName.getText();
    }

    public ForeignKeySpec.ForeignKeyRule getUpdateRule()
    {
        return (ForeignKeySpec.ForeignKeyRule)comboUpdateRule.getSelectedItem();
    }

    public ForeignKeySpec.ForeignKeyRule getDeleteRule()
    {
        return (ForeignKeySpec.ForeignKeyRule)comboDeleteRule.getSelectedItem();
    }

    public boolean isDeferred()
    {
        return chkDeferred.isSelected();
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblUpdateRule = new javax.swing.JLabel();
        comboUpdateRule = new javax.swing.JComboBox<ForeignKeySpec.ForeignKeyRule>();
        lblDeleteRule = new javax.swing.JLabel();
        comboDeleteRule = new javax.swing.JComboBox<ForeignKeySpec.ForeignKeyRule>();
        chkDeferred = new javax.swing.JCheckBox();

        lblName.setLabelFor(txtName);
        lblName.setText(NbBundle.getMessage(DbStructureUtils.class, "lblName")); // NOI18N

        lblUpdateRule.setText(NbBundle.getMessage(DbStructureUtils.class, "lblUpdateRule")); // NOI18N

        lblDeleteRule.setText(NbBundle.getMessage(DbStructureUtils.class, "lblDeleteRule")); // NOI18N

        chkDeferred.setText(NbBundle.getMessage(DbStructureUtils.class, "chkDeferred")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblName)
                    .addComponent(lblUpdateRule)
                    .addComponent(lblDeleteRule))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboUpdateRule, 0, 185, Short.MAX_VALUE)
                    .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                    .addComponent(comboDeleteRule, 0, 185, Short.MAX_VALUE)
                    .addComponent(chkDeferred, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUpdateRule)
                    .addComponent(comboUpdateRule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDeleteRule)
                    .addComponent(comboDeleteRule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkDeferred)
                .addContainerGap(12, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkDeferred;
    private javax.swing.JComboBox<ForeignKeySpec.ForeignKeyRule> comboDeleteRule;
    private javax.swing.JComboBox<ForeignKeySpec.ForeignKeyRule> comboUpdateRule;
    private javax.swing.JLabel lblDeleteRule;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblUpdateRule;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

    public void focusConstraintName() {
        txtName.requestFocus();
    }

}
